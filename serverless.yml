service: todo
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-appsync-plugin    
  - serverless-appsync-simulator
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USER_POOL: ${self:service}-${opt:stage, self:provider.stage}
    USER_POOL_CLIENT: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"  

functions:
  getTodos:
    handler: src/functions/todo/getTodos.handler
  createTodo:
    handler: src/functions/todo/createTodo.handler
  updateTodo:
    handler: src/functions/todo/updateTodo.handler
  deleteTodo:
    handler: src/functions/todo/deleteTodo.handler

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE         
        BillingMode: PAY_PER_REQUEST
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_CLIENT}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool     
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH          
    CognitoUserPool:
      Type: AWS::Cognito::UserPool              
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL}
        UsernameAttributes:
          - email        
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False        

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true 
  appSync:
    name: appsync-dynamdb
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: { Ref: AWS::Region }
      defaultAction: ALLOW
      userPoolId: { Ref: CognitoUserPool }    
    mappingTemplates:
      - dataSource: getTodos
        type: Query
        field: getTodos
      - dataSource: createTodo
        type: Mutation
        field: createTodo        
      - dataSource: updateTodo
        type: Mutation
        field: updateTodo                
      - dataSource: deleteTodo
        type: Mutation
        field: deleteTodo             
    dataSources:
      - type: AWS_LAMBDA
        name: getTodos
        config:
          functionName: getTodos
      - type: AWS_LAMBDA
        name: createTodo
        config:
          functionName: createTodo          
      - type: AWS_LAMBDA
        name: updateTodo
        config:
          functionName: updateTodo
      - type: AWS_LAMBDA
        name: deleteTodo
        config:
          functionName: deleteTodo          
    defaultMappingTemplates:
      request: false
      response: false    
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true