service: todo
frameworkVersion: '2'

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-appsync-plugin
  - aws-amplify-serverless-plugin
  - serverless-lift

provider:
  name: aws 
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev  
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USER_POOL: ${self:service}-${opt:stage, self:provider.stage}
    USER_POOL_CLIENT: ${self:service}-${opt:stage, self:provider.stage}

functions:
  listTodos:
    handler: src/functions/todo/listTodos.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"  
  createTodo:
    handler: src/functions/todo/createTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"      
  updateTodo:
    handler: src/functions/todo/updateTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"      
  deleteTodo:
    handler: src/functions/todo/deleteTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"  

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE         
        BillingMode: PAY_PER_REQUEST
    CognitoUserPool:
      Type: AWS::Cognito::UserPool              
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: The verification code to your new account is {####}
        EmailVerificationSubject: Verify your new account
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        SmsVerificationMessage: The verification code to your new account is {####}
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailMessage: The verification code to your new account is {####}
          EmailSubject: Verify your new account
          SmsMessage: The verification code to your new account is {####}     
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_CLIENT}
        UserPoolId:
          Ref: CognitoUserPool     
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - profile
          - phone
          - email
          - openid
          - aws.cognito.signin.user.admin    
        CallbackURLs:
          - https://example.com           
     
custom:
  subdomains:
    dev: todo-dev
    staging: todo-staging
    prod: todo
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true 
  appSync:
    name: appsync-dynamdb
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: { Ref: AWS::Region }
      defaultAction: ALLOW
      userPoolId: { Ref: CognitoUserPool }    
    mappingTemplates:
      - dataSource: listTodos
        type: Query
        field: listTodos
      - dataSource: createTodo
        type: Mutation
        field: createTodo        
      - dataSource: updateTodo
        type: Mutation
        field: updateTodo                
      - dataSource: deleteTodo
        type: Mutation
        field: deleteTodo             
    dataSources:
      - type: AWS_LAMBDA
        name: listTodos
        config:
          functionName: listTodos
      - type: AWS_LAMBDA
        name: createTodo
        config:
          functionName: createTodo          
      - type: AWS_LAMBDA
        name: updateTodo
        config:
          functionName: updateTodo
      - type: AWS_LAMBDA
        name: deleteTodo
        config:
          functionName: deleteTodo          
    defaultMappingTemplates:
      request: false
      response: false    
  amplify:
    - filename: ../frontend/schema.json
      type: schema.json
    - filename: ../frontend/src/aws-exports.js
      type: javascript
      appClient: CognitoUserPoolClient
      s3bucket: disabled    

constructs:
  landing:
    type: static-website
    path: ../frontend/build
    domain: ${self:custom.subdomains.${opt:stage, self:provider.stage}}.markotest.com
    certificate: arn:aws:acm:${aws:region}:${aws:accountId}:certificate/4714d929-6b2d-4e7f-b276-f64bb5a2fdd8